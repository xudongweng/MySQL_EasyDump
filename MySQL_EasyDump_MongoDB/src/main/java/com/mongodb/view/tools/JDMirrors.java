/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mongodb.view.tools;

import com.xml.view.tools.*;
import com.xml.helper.MySQLHelper;
import java.sql.SQLException;
import javax.sql.RowSet;
import javax.swing.JOptionPane;
import com.xml.model.mysql.MySQLObj;
import com.xml.model.mysql.User;
import com.xml.model.url.URL;
import com.xml.model.url.URLDic;

/**
 *
 * @author xudong.weng
 */
public class JDMirrors extends javax.swing.JDialog implements Runnable{

    private Thread selfThread = null;
    
    public JDMirrors(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.updateLink();
        this.jtaCompareInfo.setLineWrap(true);
        this.jtaCompareInfo.setWrapStyleWord(true);
    }
    
    public final void updateLink(){
        this.jcbLinkA.removeAllItems();
        this.jcbLinkA.addItem("自定义");
        this.jcbLinkB.removeAllItems();
        this.jcbLinkB.addItem("自定义");
        if(URLDic.getURLs()!=null){
            for (String key :URLDic.getURLs().keySet()){
                this.jcbLinkA.addItem(key);
                this.jcbLinkB.addItem(key);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpMirror = new javax.swing.JTabbedPane();
        jpMirrorA = new javax.swing.JPanel();
        jcbLinkA = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfServerA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfPortA = new javax.swing.JTextField();
        jtfUserA = new javax.swing.JTextField();
        jpfPasswordA = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jcbDBA = new javax.swing.JComboBox();
        jbUpdateA = new javax.swing.JButton();
        jpMirrorB = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jcbLinkB = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jtfServerB = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfPortB = new javax.swing.JTextField();
        jtfUserB = new javax.swing.JTextField();
        jpfPasswordB = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jcbDBB = new javax.swing.JComboBox();
        jbUpdateB = new javax.swing.JButton();
        jbnCompareStart = new javax.swing.JButton();
        jcbOffset = new javax.swing.JCheckBox();
        jcbCount = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaCompareInfo = new javax.swing.JTextArea();
        jbSynchro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("镜像对比");
        setResizable(false);

        jtpMirror.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jpMirrorA.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 255), 2, true));

        jcbLinkA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jcbLinkA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLinkAActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel1.setText("连接：");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel2.setText("服务器：");

        jtfServerA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel3.setText("端口：");

        jtfPortA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jtfUserA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jpfPasswordA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel4.setText("用户名：");

        jLabel5.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel5.setText("密码：");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfPortA, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jpfPasswordA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                .addComponent(jtfUserA))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jtfServerA, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfServerA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfPortA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfUserA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jpfPasswordA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel11.setText("数据库：");

        jcbDBA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jbUpdateA.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jbUpdateA.setText("更新");
        jbUpdateA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMirrorALayout = new javax.swing.GroupLayout(jpMirrorA);
        jpMirrorA.setLayout(jpMirrorALayout);
        jpMirrorALayout.setHorizontalGroup(
            jpMirrorALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMirrorALayout.createSequentialGroup()
                .addGroup(jpMirrorALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMirrorALayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbLinkA, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpMirrorALayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpMirrorALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpMirrorALayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbDBA, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbUpdateA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jpMirrorALayout.setVerticalGroup(
            jpMirrorALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMirrorALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMirrorALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbLinkA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpMirrorALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jcbDBA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbUpdateA))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jtpMirror.addTab("镜像A", jpMirrorA);

        jpMirrorB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 255), 2, true));

        jLabel6.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel6.setText("连接：");

        jcbLinkB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jcbLinkB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLinkBActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel7.setText("服务器：");

        jtfServerB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel8.setText("端口：");

        jtfPortB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jtfUserB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jpfPasswordB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel9.setText("用户名：");

        jLabel10.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel10.setText("密码：");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfPortB, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jpfPasswordB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                .addComponent(jtfUserB))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jtfServerB, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtfServerB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtfPortB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfUserB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jpfPasswordB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel12.setText("数据库：");

        jcbDBB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N

        jbUpdateB.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jbUpdateB.setText("更新");
        jbUpdateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMirrorBLayout = new javax.swing.GroupLayout(jpMirrorB);
        jpMirrorB.setLayout(jpMirrorBLayout);
        jpMirrorBLayout.setHorizontalGroup(
            jpMirrorBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMirrorBLayout.createSequentialGroup()
                .addGroup(jpMirrorBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMirrorBLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbLinkB, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpMirrorBLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpMirrorBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpMirrorBLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbDBB, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbUpdateB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jpMirrorBLayout.setVerticalGroup(
            jpMirrorBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMirrorBLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMirrorBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jcbLinkB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpMirrorBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jcbDBB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbUpdateB))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jtpMirror.addTab("镜像B", jpMirrorB);

        jbnCompareStart.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jbnCompareStart.setText("开始对比");
        jbnCompareStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbnCompareStartActionPerformed(evt);
            }
        });

        jcbOffset.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jcbOffset.setSelected(true);
        jcbOffset.setText("偏移值");

        jcbCount.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jcbCount.setText("对比量");

        jLabel13.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        jLabel13.setText("对比信息：");

        jtaCompareInfo.setColumns(20);
        jtaCompareInfo.setFont(new java.awt.Font("微软雅黑", 0, 13)); // NOI18N
        jtaCompareInfo.setRows(5);
        jScrollPane1.setViewportView(jtaCompareInfo);

        jbSynchro.setText("开始同步");
        jbSynchro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSynchroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jtpMirror, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jbnCompareStart))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbOffset)
                            .addComponent(jcbCount)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSynchro)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtpMirror, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jbnCompareStart, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jcbOffset)
                                .addGap(3, 3, 3)
                                .addComponent(jcbCount)
                                .addGap(27, 27, 27)
                                .addComponent(jbSynchro, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void jbUpdateAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateAActionPerformed

        if(this.jtfServerA.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "服务器不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jtfPortA.getText().trim().equals((""))){
            JOptionPane.showMessageDialog(null, "端口不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jtfUserA.getText().trim().equals((""))){
            JOptionPane.showMessageDialog(null, "用户名不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        RowSet rs=MySQLHelper.getAllDB(this.jtfUserA.getText(), String.valueOf(this.jpfPasswordA.getPassword()), this.jtfServerA.getText(),this.jtfPortA.getText());
        if(rs==null){
            JOptionPane.showMessageDialog(null, "数据库连接错误。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.jcbDBA.removeAll();
        try{
            while (rs.next()) {
                this.jcbDBA.addItem(rs.getString(1));
                
            }
        }catch(SQLException sqlEx){
            JOptionPane.showMessageDialog(null, sqlEx.getErrorCode()+sqlEx.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbUpdateAActionPerformed

    private void jcbLinkAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLinkAActionPerformed
        if(this.jcbLinkA.getItemCount()>0){
            if(!this.jcbLinkA.getSelectedItem().equals("自定义")){
                URL url=URLDic.getURL(this.jcbLinkA.getSelectedItem().toString());
                this.jtfServerA.setText(url.getServer());
                this.jtfPortA.setText(url.getPort());
                this.jtfUserA.setText(url.getUser());
                this.jpfPasswordA.setText(url.getPwd());

            }else{
                this.jtfServerA.setText("");
                this.jtfPortA.setText("3306");
                this.jtfUserA.setText("");
                this.jpfPasswordA.setText("");

            }
            this.jcbDBA.removeAllItems();
        }
    }//GEN-LAST:event_jcbLinkAActionPerformed

    private void jbUpdateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateBActionPerformed
        if(this.jtfServerB.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "服务器不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jtfPortB.getText().trim().equals((""))){
            JOptionPane.showMessageDialog(null, "端口不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(this.jtfUserB.getText().trim().equals((""))){
            JOptionPane.showMessageDialog(null, "用户名不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        RowSet rs=MySQLHelper.getAllDB(this.jtfUserB.getText(), String.valueOf(this.jpfPasswordB.getPassword()), this.jtfServerB.getText(),this.jtfPortB.getText());
        if(rs==null){
            JOptionPane.showMessageDialog(null, "数据库连接错误。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.jcbDBB.removeAll();
        try{
            while (rs.next()) {
                this.jcbDBB.addItem(rs.getString(1));
                
            }
        }catch(SQLException e){
            System.out.println(e.getClass().getName() + ":"+e.getMessage());
            JOptionPane.showMessageDialog(null, e.getErrorCode()+e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbUpdateBActionPerformed

    private void jcbLinkBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLinkBActionPerformed
        if(this.jcbLinkB.getItemCount()>0){
            if(!this.jcbLinkB.getSelectedItem().equals("自定义")){
                URL url=URLDic.getURL(this.jcbLinkB.getSelectedItem().toString());
                this.jtfServerB.setText(url.getServer());
                this.jtfPortB.setText(url.getPort());
                this.jtfUserB.setText(url.getUser());
                this.jpfPasswordB.setText(url.getPwd());

            }else{
                this.jtfServerB.setText("");
                this.jtfPortB.setText("3306");
                this.jtfUserB.setText("");
                this.jpfPasswordB.setText("");

            }
            this.jcbDBB.removeAllItems();
        }
    }//GEN-LAST:event_jcbLinkBActionPerformed
    
    private void jbnCompareStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbnCompareStartActionPerformed
        if(this.dbCheck()==false){
            return;
        }
        
        if(this.jcbCount.isSelected()==true){
            if(this.jcbDBA.getSelectedItem()==null){
                JOptionPane.showMessageDialog(null, "镜像A数据库没有被选择。", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(this.jcbDBB.getSelectedItem()==null){
                JOptionPane.showMessageDialog(null, "镜像B数据库没有被选择。", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(selfThread == null || selfThread.getState().toString().equals("TERMINATED")) {
            this.jtaCompareInfo.setText("");
            selfThread = new Thread(JDMirrors.this);
            selfThread.start();
        }else{
            JOptionPane.showMessageDialog(null, "对比在进行中。", "信息", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbnCompareStartActionPerformed
    //将输入的用户名和密码拆分
    private User getStringUser(String s){
        int i=s.indexOf(";");
        if(s.length()==i+1||i==0){
            JOptionPane.showMessageDialog(null, "输入格式错误。", "错误", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        
        return new User(s.substring(0,i),s.substring(i+1));
    }
    
    private void jbSynchroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSynchroActionPerformed
        //同步用户名密码获取
        String inputValue=JOptionPane.showInputDialog("输入同步用户名和密码用分号分开：root;root"); 
        if(inputValue==null){
            return;
        }else if(inputValue.equals("")){
            JOptionPane.showMessageDialog(null, "输入不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
        }
        User user=this.getStringUser(inputValue);
        if(user==null){
            return;
        }
        
        if(this.dbCheck()==false){
            return;
        }
                    
        MySQLObj msoA=new MySQLObj(this.jtfUserA.getText(), String.valueOf(this.jpfPasswordA.getPassword()), this.jtfServerA.getText(), this.jtfPortA.getText(),String.valueOf(this.jcbDBA.getSelectedItem()));
        MySQLObj msoB=new MySQLObj(this.jtfUserB.getText(), String.valueOf(this.jpfPasswordB.getPassword()), this.jtfServerB.getText(), this.jtfPortB.getText(),String.valueOf(this.jcbDBB.getSelectedItem()));
        
        RowSet rsSyUser=MySQLHelper.getSqlData(msoA.getUser(), msoA.getPassword(), msoA.getServer(), msoA.getPort(), 
                "SELECT Host,User FROM mysql.user WHERE Host='"+msoB.getServer()+"' AND User='"+user.getUser()+"'");
        if(rsSyUser==null){
            JOptionPane.showMessageDialog(null, "镜像A"+msoA.getServer()+"无法获取数据信息，连接数据库失败。", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try{
            
            rsSyUser.last();
            System.out.println(String.valueOf(rsSyUser.getRow()));
            if(rsSyUser.getRow()<1){
                JOptionPane.showMessageDialog(null, "未在"+msoA.getServer()+"找到用户"+user.getUser(), "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }catch(SQLException | NumberFormatException e){
            System.out.println(e.getClass().getName() + ":"+e.getMessage());
            JOptionPane.showMessageDialog(null, e.toString(), "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        RowSet rsA=MySQLHelper.getSqlData(msoA.getUser(), msoA.getPassword(), msoA.getServer(), msoA.getPort(), "SHOW MASTER STATUS");
        String binfile="";
        long posA=0;
        try{
            //主库获取偏移值
            if(rsA==null){
                JOptionPane.showMessageDialog(null, "镜像A无法获取数据信息", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(rsA.next()){
                binfile=rsA.getString("File");
                posA=Integer.valueOf(rsA.getString("Position"));
                //this.jtaCompareInfo.insert("镜像A\n正在写入文件"+rsA.getString("File")+"偏移量为"+posA+"\n",this.jtaCompareInfo.getText().length());
            }else{
                JOptionPane.showMessageDialog(null, "镜像A非镜像数据库。", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String sql[]={"STOP SLAVE;","RESET SLAVE;",
                    "CHANGE MASTER TO MASTER_LOG_FILE='"+ binfile +"',MASTER_LOG_POS="+posA+",MASTER_HOST='"+msoA.getServer()+
                    "',MASTER_USER='"+user.getUser()+"',MASTER_PASSWORD='"+user.getPassword()+"',MASTER_CONNECT_RETRY=10;",
                    "START SLAVE;"};
            
            if(MySQLHelper.execSql(msoB.getUser(), msoB.getPassword(), msoB.getServer(), msoB.getPort(), sql)){
                JOptionPane.showMessageDialog(null, "同步成功。", "提示", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "同步失败。", "错误", JOptionPane.ERROR_MESSAGE);
            }
            
        }catch(SQLException | NumberFormatException e){
            System.out.println(e.getClass().getName() + ":"+e.getMessage());
            JOptionPane.showMessageDialog(null, e.toString(), "错误", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbSynchroActionPerformed

    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbSynchro;
    private javax.swing.JButton jbUpdateA;
    private javax.swing.JButton jbUpdateB;
    private javax.swing.JButton jbnCompareStart;
    private javax.swing.JCheckBox jcbCount;
    private javax.swing.JComboBox jcbDBA;
    private javax.swing.JComboBox jcbDBB;
    private javax.swing.JComboBox jcbLinkA;
    private javax.swing.JComboBox jcbLinkB;
    private javax.swing.JCheckBox jcbOffset;
    private javax.swing.JPanel jpMirrorA;
    private javax.swing.JPanel jpMirrorB;
    private javax.swing.JPasswordField jpfPasswordA;
    private javax.swing.JPasswordField jpfPasswordB;
    private javax.swing.JTextArea jtaCompareInfo;
    private javax.swing.JTextField jtfPortA;
    private javax.swing.JTextField jtfPortB;
    private javax.swing.JTextField jtfServerA;
    private javax.swing.JTextField jtfServerB;
    private javax.swing.JTextField jtfUserA;
    private javax.swing.JTextField jtfUserB;
    private javax.swing.JTabbedPane jtpMirror;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
    
    @Override
    public void run() {
        this.dbCompare();
    }
    
    public boolean dbCheck(){
        if(this.jcbCount.isSelected()==false && this.jcbOffset.isSelected()==false){
            JOptionPane.showMessageDialog(null, "请选择一种对比方式。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if(this.jtfServerA.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "镜像A服务器不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(this.jtfPortA.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "镜像A端口不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(this.jtfUserA.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "镜像A用户名不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(this.jtfServerB.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "镜像B服务器不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(this.jtfPortB.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "镜像B端口不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(this.jtfUserB.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "镜像B用户名不能为空。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        System.out.println(this.jtfServerA.getText());
        System.out.println(this.jtfServerB.getText());
        if(this.jtfServerA.getText().trim().equals(this.jtfServerB.getText().trim())&&
                this.jtfPortA.getText().trim().equals(this.jtfPortB.getText().trim())){
            JOptionPane.showMessageDialog(null, "镜像A与镜像B为同一数据库。", "错误", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    // <editor-fold defaultstate="collapsed" desc="镜像对比">
    private void dbCompare(){
        StringBuilder sbmsg=new StringBuilder();
        MySQLObj msoA=new MySQLObj(this.jtfUserA.getText(), String.valueOf(this.jpfPasswordA.getPassword()), this.jtfServerA.getText(), this.jtfPortA.getText(),String.valueOf(this.jcbDBA.getSelectedItem()));
        MySQLObj msoB=new MySQLObj(this.jtfUserB.getText(), String.valueOf(this.jpfPasswordB.getPassword()), this.jtfServerB.getText(), this.jtfPortB.getText(),String.valueOf(this.jcbDBB.getSelectedItem()));
        sbmsg.append("镜像A\n服务器：").append(msoA.getServer()).append("\n").append("端口：").append(msoA.getPort()).append("\n");
        sbmsg.append(MySQLHelper.getCon(msoA.getUser(), msoA.getPassword(), msoA.getServer(), msoA.getPort()));
        if(sbmsg.indexOf("连接成功")>=0){
            this.jtaCompareInfo.insert(sbmsg.append("\n").toString(), this.jtaCompareInfo.getText().length());
        }else{
            this.jtaCompareInfo.insert(sbmsg.append("\n").toString(), this.jtaCompareInfo.getText().length());
            return;
        }
        this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
        
        sbmsg.delete(0, sbmsg.length());
        sbmsg.append("镜像B\n服务器：").append(msoB.getServer()).append("\n").append("端口：").append(msoB.getPort()).append("\n");
        sbmsg.append(MySQLHelper.getCon(msoB.getUser(), msoB.getPassword(), msoB.getServer(), msoB.getPort()));
        if(sbmsg.indexOf("连接成功")>=0){
            this.jtaCompareInfo.insert(sbmsg.append("\n\n").toString(), this.jtaCompareInfo.getText().length());
        }else{
            this.jtaCompareInfo.insert(sbmsg.append("\n\n").toString(), this.jtaCompareInfo.getText().length());
            return;
        }
        this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
        
        sbmsg.delete(0, sbmsg.length());
        if(this.jcbOffset.isSelected()==true){
            this.posCompare(msoA, msoB);
        }
        if(this.jcbCount.isSelected()==true){
            this.dbRowsCompare(msoA, msoB);
        }
        
        
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="偏移量比较">
    private boolean posCompare(MySQLObj msoA,MySQLObj msoB){
        this.jtaCompareInfo.insert("开始进行偏移值对比\n",this.jtaCompareInfo.getText().length());
        this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
        
        RowSet rsA=MySQLHelper.getSqlData(msoA.getUser(), msoA.getPassword(), msoA.getServer(), msoA.getPort(), "SHOW MASTER STATUS");
        RowSet rsB=MySQLHelper.getSqlData(msoB.getUser(), msoB.getPassword(), msoB.getServer(), msoB.getPort(), "SHOW SLAVE STATUS");
        int posA=0,posB=0;
        try{
            //主库获取偏移值
            if(rsA==null){
                this.jtaCompareInfo.insert("镜像A无法获取数据信息\n",this.jtaCompareInfo.getText().length());
                return false;
            }
            
            if(rsA.next()){
                posA=Integer.valueOf(rsA.getString("Position"));
                this.jtaCompareInfo.insert("镜像A\n正在写入文件"+rsA.getString("File")+"偏移量为"+posA+"\n",this.jtaCompareInfo.getText().length());

            }else{
                this.jtaCompareInfo.insert("镜像A非镜像数据库，无法进行对比\n",this.jtaCompareInfo.getText().length());
                return false;
            }
            
            //从库获取偏移值
            if(rsB==null){
                this.jtaCompareInfo.insert("镜像B无法获取数据信息\n",this.jtaCompareInfo.getText().length());
                return false;
            }
            
            if(rsB.next()){
                posB=Integer.valueOf(rsB.getString("Read_Master_Log_Pos"));
                this.jtaCompareInfo.insert("镜像B\n正在写入文件"+rsB.getString("Master_Log_File")+"偏移量为"+posB+"\n",this.jtaCompareInfo.getText().length());

            }else{
                this.jtaCompareInfo.insert("*镜像B非镜像数据库，无法进行对比\n",this.jtaCompareInfo.getText().length());
                return false;
            }
            
            if(posA!=posB){
                this.jtaCompareInfo.insert("镜像A与镜像B偏移量存在差异，偏差值为"+(posA-posB)+"\n",this.jtaCompareInfo.getText().length());
            }
            this.jtaCompareInfo.insert("镜像B运行状态参数："+"\nSlave_IO_Running："+rsB.getString("Slave_IO_Running")+
                    "\nSlave_SQL_Running："+rsB.getString("Slave_SQL_Running")+"\n",this.jtaCompareInfo.getText().length());
            
            if(!rsB.getString("Slave_IO_Running").equals("Yes") || !rsB.getString("Slave_SQL_Running").equals("Yes")){
                this.jtaCompareInfo.insert("*镜像A与镜像B目前可能没有在同步\n",this.jtaCompareInfo.getText().length());
            }

            this.jtaCompareInfo.insert("镜像A其他参数：\nBinlog_Do_DB："+rsA.getString("Binlog_Do_DB")+"\nBinlog_Ignore_DB："+rsA.getString("Binlog_Ignore_DB")+"\n",this.jtaCompareInfo.getText().length());
            this.jtaCompareInfo.insert("镜像B其他参数：\nSlave_IO_State："+rsB.getString("Slave_IO_State")+
                    "\nMaster_Host："+rsB.getString("Master_Host")+
                    "\nMaster_User："+rsB.getString("Master_User")+
                    "\nMaster_Port："+rsB.getString("Master_Port")+
                    "\nConnect_Retry："+rsB.getString("Connect_Retry")+
                    "\nRelay_Log_File："+rsB.getString("Relay_Log_File")+
                    "\nRelay_Log_Pos："+rsB.getString("Relay_Log_Pos")+
                    "\nRelay_Master_Log_File："+rsB.getString("Relay_Master_Log_File")+
                    "\nReplicate_Do_DB："+rsB.getString("Replicate_Do_DB")+
                    "\nReplicate_Ignore_DB："+rsB.getString("Replicate_Ignore_DB")+
                    "\nReplicate_Do_Table："+rsB.getString("Replicate_Do_Table")+
                    "\nReplicate_Ignore_Table："+rsB.getString("Replicate_Ignore_Table")+
                    "\nReplicate_Wild_Do_Table："+rsB.getString("Replicate_Wild_Do_Table")+
                    "\nReplicate_Wild_Ignore_Table："+rsB.getString("Replicate_Wild_Ignore_Table")+
                    "\nLast_Errno："+rsB.getString("Last_Errno")+
                    "\nLast_Error："+rsB.getString("Last_Error")+
                    "\nSkip_Counter："+rsB.getString("Skip_Counter")+
                    "\nExec_Master_Log_Pos："+rsB.getString("Exec_Master_Log_Pos")+
                    "\nRelay_Log_Space："+rsB.getString("Relay_Log_Space")+
                    "\nUntil_Condition："+rsB.getString("Until_Condition")+
                    "\nUntil_Log_File："+rsB.getString("Until_Log_File")+
                    "\nUntil_Log_Pos："+rsB.getString("Until_Log_Pos")+
                    "\nMaster_SSL_Allowed："+rsB.getString("Master_SSL_Allowed")+
                    "\nMaster_SSL_CA_File："+rsB.getString("Master_SSL_CA_File")+
                    "\nMaster_SSL_CA_Path："+rsB.getString("Master_SSL_CA_Path")+
                    "\nMaster_SSL_Cert："+rsB.getString("Master_SSL_Cert")+
                    "\nMaster_SSL_Cipher："+rsB.getString("Master_SSL_Cipher")+
                    "\nMaster_SSL_Key："+rsB.getString("Master_SSL_Key")+
                    "\nSeconds_Behind_Master："+rsB.getString("Seconds_Behind_Master")+
                    "\nMaster_SSL_Verify_Server_Cert："+rsB.getString("Master_SSL_Verify_Server_Cert")+
                    "\nLast_IO_Errno："+rsB.getString("Last_IO_Errno")+
                    "\nLast_IO_Error："+rsB.getString("Last_IO_Error")+
                    "\nLast_SQL_Errno："+rsB.getString("Last_SQL_Errno")+
                    "\nLast_SQL_Error："+rsB.getString("Last_SQL_Error")+
                    "\n",this.jtaCompareInfo.getText().length());
            
            
        }catch( SQLException e){
            System.out.println(e.getClass().getName() + ":"+e.getMessage());
            this.jtaCompareInfo.insert(e.toString(),this.jtaCompareInfo.getText().length());
            this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
            return false;
        }catch(Exception e){
            System.out.println(e.getClass().getName() + ":"+e.getMessage());
            this.jtaCompareInfo.insert(e.toString(),this.jtaCompareInfo.getText().length());
            this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
            return false;
        }
        
        this.jtaCompareInfo.insert("偏移值对比结束\n\n",this.jtaCompareInfo.getText().length());
        this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
        
        return true;
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="偏移值比较">
    private boolean dbRowsCompare(MySQLObj msoA,MySQLObj msoB){
        this.jtaCompareInfo.insert("开始进行镜像A数据库"+msoA.getDb()+"与镜像B数据库"+msoB.getDb()+"对比量对比\n",this.jtaCompareInfo.getText().length());
        
        RowSet rsRows=MySQLHelper.getDBTables(msoA.getUser(), msoA.getPassword(), msoA.getServer(), msoA.getPort(), msoA.getDb());
        try{
            if(rsRows==null){
                this.jtaCompareInfo.insert("镜像A无法获取数据信息\n",this.jtaCompareInfo.getText().length());
                this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
                return false;
            }
            int rowa=0,rowb=0;
            while(rsRows.next()){
                RowSet rsCountA=MySQLHelper.getSqlData(msoA.getUser(), msoA.getPassword(), msoA.getServer(), msoA.getPort(), "SELECT COUNT(*) FROM `"+msoA.getDb()+"`.`"+rsRows.getString(1)+"`");
                RowSet rsCountB=MySQLHelper.getSqlData(msoB.getUser(), msoB.getPassword(), msoB.getServer(), msoB.getPort(), "SELECT COUNT(*) FROM `"+msoB.getDb()+"`.`"+rsRows.getString(1)+"`");
                if(rsCountA==null){
                    this.jtaCompareInfo.insert("镜像A连接数据库"+msoA.getDb()+"的"+rsRows.getString(1)+"表不存在\n",this.jtaCompareInfo.getText().length());
                    this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
                    return false;
                }
                if(rsCountB==null){
                    this.jtaCompareInfo.insert("镜像B连接数据库"+msoB.getDb()+"的"+rsRows.getString(1)+"表不存在\n",this.jtaCompareInfo.getText().length());
                    this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
                    return false;
                }
                if(rsCountA.next())
                    rowa=Integer.valueOf(rsCountA.getString(1));
                if(rsCountB.next())
                    rowb=Integer.valueOf(rsCountB.getString(1));
                this.jtaCompareInfo.insert("镜像A数据库"+msoA.getDb()+"的"+rsRows.getString(1)+"表为"+rowa+"行\n",this.jtaCompareInfo.getText().length());
                this.jtaCompareInfo.insert("镜像B数据库"+msoA.getDb()+"的"+rsRows.getString(1)+"表为"+rowb+"行\n",this.jtaCompareInfo.getText().length());
                
                if(rowa!=rowb){
                    this.jtaCompareInfo.insert("*镜像A数据库"+msoA.getDb()+"与镜像B数据库"+msoB.getDb()+"同步表不一致，误差行数为"+(rowa-rowb)+"\n",this.jtaCompareInfo.getText().length());
                }
                this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
            }
        }catch( SQLException | NumberFormatException e){
            System.out.println(e.getClass().getName() + ":"+e.getMessage());
            this.jtaCompareInfo.insert(e.toString(),this.jtaCompareInfo.getText().length());
            this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
            return false;
        }
        this.jtaCompareInfo.insert("镜像A数据库"+msoA.getDb()+"与镜像B数据库"+msoB.getDb()+"对比量对比结束\n\n",this.jtaCompareInfo.getText().length());
        this.jtaCompareInfo.setCaretPosition(this.jtaCompareInfo.getText().length());//设置自动最底部
        return true;
    }
    // </editor-fold>
  
}
